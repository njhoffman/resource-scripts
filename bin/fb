#!/usr/bin/env node

// bash -xu <<< "$(curl -fsSL https://raw.githubusercontent.com/filebot/plugins/master/installer/deb.sh)"
// deb [arch=amd64] https://get.filebot.net/deb/ stable main
// filebot -version; filebot --license *.psm

const spawn = require('child_process').spawn;

const clr = {
  brightWhite: '\033[1;37m',
  red:         '\033[0;31m',
  brightRed:   '\033[1;31m',
  yellow:      '\033[1;33m',
  orange:      '\033[0;33m',
  green:       '\033[0;32m',
  brightGreen: '\033[1;32m',
  blue:        '\033[0;34m',
  brightBlue:  '\033[1;34m',
  cyan:        '\033[0;36m',
  brightCyan:  '\033[1;36m',
  reset:       '\033[0m',
};

const config = {
  testRun:     false,
  target:      process.cwd(),
  destination: `${process.cwd().split('/').splice(0, 3).join('/')}/Sorted`,
  db:          '', // thetvdb, themoviedb
  format:      '{plex}',
  query:       false
};

for (let j = 2; j < process.argv.length; j++) {
  const arg = process.argv[j].replace(/\-/g, '').trim();
  if (arg.indexOf('test') !== -1) {
    config.testRun = true;
  } else if (arg === 'destination' || arg === 'dest') {
    config.destination =  process.argv[j + 1];
  } else if (arg === 'target' || arg === 't') {
    config.destination =  process.argv[j + 1];
  } else if (arg === 'database' || arg === 'db') {
    config.db =  process.argv[j + 1];
  } else if (arg === 'format' || arg === 'f') {
    config.format =  process.argv[j + 1];
  } else if (arg === 'query' || arg === 'q') {
    config.query =  process.argv[j + 1];
  }
}

const args = [
  '-rename',
  config.target,
  '-r',
  '-non-strict',
  '-no-xattr',
  '--format',
  `${config.destination}/${config.format}`,
  '--action',
  config.testRun ? 'test' : 'move',
];

if (config.db) {
  args.push('--db', config.db);
}

if (config.query) {
  args.push('--q', config.query);
}

console.log(`\n${clr.brightGreen}**Filebot Renamer**${clr.reset}\n\n  filebot `, args.join(' '), '\n');
if (config.testRun) {
  console.log(`  ${clr.brightBlue}--TEST MODE ${clr.reset}\n`);
}


const filebot = spawn('filebot', args);

let stdOut = "";
filebot.stdout.on('data', data => {
  // stdOut += data;
  outputData(data + "");
});

filebot.stderr.on('data', data => {
  // console.log('stderr: ' + data);
});

filebot.on('close', code => {
  // outputData(stdOut);
});

const actionRE =  /^(\[\w+\]|skipped) (?:from )?\[(.*?)\] (to|because) \[(.*?)\](.*)/i;
const outputData = (data) => {
  data.split('\n').forEach(line => {
    if (actionRE.test(line)) {
      const color1 = RegExp.$1 === '[TEST]' ?
        clr.orange : RegExp.$1 === '[MOVE]' ?
        clr.brightGreen : RegExp.$1 === 'Skipped' ?
        clr.red : clr.brightWhite;

      let origin = RegExp.$2.replace(config.target, './').split('/');
      origin = origin.slice(0, -1).join('/') + clr.brightWhite + origin.slice(-1) + clr.reset;
      let destination = RegExp.$4.replace(config.target, '').split('/');
      destination = destination.slice(0, -1).join('/') + '/' +
        clr.cyan + destination.slice(-1) + clr.reset;
      // console.log(`${RegExp.$1}\n${origin}\n${RegExp.$3}\n${RegExp.$4}\n${RegExp.$5}`);
      console.log(`  ${color1}${RegExp.$1}${clr.reset}`);
      console.log(`\t${origin} ${RegExp.$3}`);
      console.log(`\t${destination} ${RegExp.$5}`);
    } else if (line.trim().length > 0) {
      console.log(line.replace(/(\[[^\]]+\])/, `${clr.brightGreen}$1${clr.reset}`));
    }
  });
};




